// Mocks generated by Mockito 5.2.0 from annotations
// in english_words_trainer/test/features/profile/domain/usecases/upload_avatar_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:typed_data' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:english_words_trainer/core/errors/failures.dart' as _i8;
import 'package:english_words_trainer/features/profile/domain/entities/profile_entity.dart'
    as _i9;
import 'package:english_words_trainer/features/profile/domain/repositiroes/profile_repository.dart'
    as _i7;
import 'package:image_picker/image_picker.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDateTime_0 extends _i1.Fake implements DateTime {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [XFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockXFile extends _i1.Mock implements _i3.XFile {
  MockXFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i4.Future<void> saveTo(String? path) =>
      (super.noSuchMethod(Invocation.method(#saveTo, [path]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> length() =>
      (super.noSuchMethod(Invocation.method(#length, []),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<String> readAsString(
          {_i5.Encoding? encoding = const _i5.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsString, [], {#encoding: encoding}),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<_i6.Uint8List> readAsBytes() =>
      (super.noSuchMethod(Invocation.method(#readAsBytes, []),
              returnValue: Future<_i6.Uint8List>.value(_i6.Uint8List(0)))
          as _i4.Future<_i6.Uint8List>);
  @override
  _i4.Stream<_i6.Uint8List> openRead([int? start, int? end]) =>
      (super.noSuchMethod(Invocation.method(#openRead, [start, end]),
              returnValue: Stream<_i6.Uint8List>.empty())
          as _i4.Stream<_i6.Uint8List>);
  @override
  _i4.Future<DateTime> lastModified() =>
      (super.noSuchMethod(Invocation.method(#lastModified, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_0()))
          as _i4.Future<DateTime>);
}

/// A class which mocks [ProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRepository extends _i1.Mock implements _i7.ProfileRepository {
  MockProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i8.Failure, _i9.ProfileEntity>> createProfile(
          String? userId) =>
      (super.noSuchMethod(Invocation.method(#createProfile, [userId]),
          returnValue: Future<_i2.Either<_i8.Failure, _i9.ProfileEntity>>.value(
              _FakeEither_1<_i8.Failure, _i9.ProfileEntity>())) as _i4
          .Future<_i2.Either<_i8.Failure, _i9.ProfileEntity>>);
  @override
  _i4.Future<_i2.Either<_i8.Failure, _i9.ProfileEntity>> updateProfile(
          _i9.ProfileEntity? profile) =>
      (super.noSuchMethod(Invocation.method(#updateProfile, [profile]),
          returnValue: Future<_i2.Either<_i8.Failure, _i9.ProfileEntity>>.value(
              _FakeEither_1<_i8.Failure, _i9.ProfileEntity>())) as _i4
          .Future<_i2.Either<_i8.Failure, _i9.ProfileEntity>>);
  @override
  _i4.Future<_i2.Either<_i8.Failure, _i9.ProfileEntity?>> getProfileById(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#getProfileById, [id]),
              returnValue:
                  Future<_i2.Either<_i8.Failure, _i9.ProfileEntity?>>.value(
                      _FakeEither_1<_i8.Failure, _i9.ProfileEntity?>()))
          as _i4.Future<_i2.Either<_i8.Failure, _i9.ProfileEntity?>>);
  @override
  _i4.Future<_i2.Either<_i8.Failure, String>> uploadAvatar(
          String? userId, _i3.XFile? file) =>
      (super.noSuchMethod(Invocation.method(#uploadAvatar, [userId, file]),
              returnValue: Future<_i2.Either<_i8.Failure, String>>.value(
                  _FakeEither_1<_i8.Failure, String>()))
          as _i4.Future<_i2.Either<_i8.Failure, String>>);
}
