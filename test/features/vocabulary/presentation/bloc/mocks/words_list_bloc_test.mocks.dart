// Mocks generated by Mockito 5.2.0 from annotations
// in english_words_trainer/test/features/vocabulary/presentation/bloc/words_list_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:english_words_trainer/core/errors/failures.dart' as _i7;
import 'package:english_words_trainer/features/vocabulary/domain/entities/word_api_description_entity.dart'
    as _i13;
import 'package:english_words_trainer/features/vocabulary/domain/entities/word_entity.dart'
    as _i8;
import 'package:english_words_trainer/features/vocabulary/domain/repositories/vocabulary_repository.dart'
    as _i2;
import 'package:english_words_trainer/features/vocabulary/domain/repositories/word_description_repository.dart'
    as _i4;
import 'package:english_words_trainer/features/vocabulary/domain/usecases/add_new_word.dart'
    as _i9;
import 'package:english_words_trainer/features/vocabulary/domain/usecases/delete_word.dart'
    as _i11;
import 'package:english_words_trainer/features/vocabulary/domain/usecases/get_word_description.dart'
    as _i12;
import 'package:english_words_trainer/features/vocabulary/domain/usecases/get_words_list.dart'
    as _i5;
import 'package:english_words_trainer/features/vocabulary/domain/usecases/update_word.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeVocabularyRepository_0 extends _i1.Fake
    implements _i2.VocabularyRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeWordDescriptionRepository_2 extends _i1.Fake
    implements _i4.WordDescriptionRepository {}

/// A class which mocks [GetWordsList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWordsList extends _i1.Mock implements _i5.GetWordsList {
  MockGetWordsList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VocabularyRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeVocabularyRepository_0()) as _i2.VocabularyRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.WordEntity>>> call(
          _i5.GetWordsParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i7.Failure, List<_i8.WordEntity>>>.value(
                      _FakeEither_1<_i7.Failure, List<_i8.WordEntity>>()))
          as _i6.Future<_i3.Either<_i7.Failure, List<_i8.WordEntity>>>);
}

/// A class which mocks [AddNewWord].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddNewWord extends _i1.Mock implements _i9.AddNewWord {
  MockAddNewWord() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VocabularyRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeVocabularyRepository_0()) as _i2.VocabularyRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.WordEntity>> call(
          _i9.AddNewWordParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i7.Failure, _i8.WordEntity>>.value(
              _FakeEither_1<_i7.Failure, _i8.WordEntity>())) as _i6
          .Future<_i3.Either<_i7.Failure, _i8.WordEntity>>);
}

/// A class which mocks [UpdateWord].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateWord extends _i1.Mock implements _i10.UpdateWord {
  MockUpdateWord() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VocabularyRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeVocabularyRepository_0()) as _i2.VocabularyRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.WordEntity>> call(
          _i10.UpdateWordParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i7.Failure, _i8.WordEntity>>.value(
              _FakeEither_1<_i7.Failure, _i8.WordEntity>())) as _i6
          .Future<_i3.Either<_i7.Failure, _i8.WordEntity>>);
}

/// A class which mocks [DeleteWord].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteWord extends _i1.Mock implements _i11.DeleteWord {
  MockDeleteWord() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VocabularyRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeVocabularyRepository_0()) as _i2.VocabularyRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>> call(
          _i11.DeleteWordParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.Failure, _i3.Unit>>.value(
                  _FakeEither_1<_i7.Failure, _i3.Unit>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>);
}

/// A class which mocks [GetWordDescription].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWordDescription extends _i1.Mock
    implements _i12.GetWordDescription {
  MockGetWordDescription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.WordDescriptionRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeWordDescriptionRepository_2())
          as _i4.WordDescriptionRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i13.WordApiDescriptionEntity>> call(
          _i12.GetWordDescriptionParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<
                  _i3.Either<_i7.Failure, _i13.WordApiDescriptionEntity>>.value(
              _FakeEither_1<_i7.Failure, _i13.WordApiDescriptionEntity>())) as _i6
          .Future<_i3.Either<_i7.Failure, _i13.WordApiDescriptionEntity>>);
}
