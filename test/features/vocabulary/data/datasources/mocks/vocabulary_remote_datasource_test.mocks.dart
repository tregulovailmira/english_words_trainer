// Mocks generated by Mockito 5.2.0 from annotations
// in english_words_trainer/test/features/vocabulary/data/datasources/vocabulary_remote_datasource_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;

import 'package:functions_client/functions_client.dart' as _i4;
import 'package:gotrue/gotrue.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:postgrest/postgrest.dart' as _i7;
import 'package:realtime_client/realtime_client.dart' as _i3;
import 'package:storage_client/storage_client.dart' as _i5;
import 'package:supabase/src/remove_subscription_result.dart' as _i8;
import 'package:supabase/src/supabase_query_builder.dart' as _i6;
import 'package:supabase/src/supabase_realtime_client.dart' as _i9;
import 'package:supabase/src/supabase_stream_builder.dart' as _i10;
import 'package:supabase/supabase.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGoTrueClient_0 extends _i1.Fake implements _i2.GoTrueClient {}

class _FakeRealtimeClient_1 extends _i1.Fake implements _i3.RealtimeClient {}

class _FakeFunctionsClient_2 extends _i1.Fake implements _i4.FunctionsClient {}

class _FakeSupabaseStorageClient_3 extends _i1.Fake
    implements _i5.SupabaseStorageClient {}

class _FakeSupabaseQueryBuilder_4 extends _i1.Fake
    implements _i6.SupabaseQueryBuilder {}

class _FakePostgrestFilterBuilder_5 extends _i1.Fake
    implements _i7.PostgrestFilterBuilder {}

class _FakeRemoveSubscriptionResult_6 extends _i1.Fake
    implements _i8.RemoveSubscriptionResult {}

class _FakeUri_7 extends _i1.Fake implements Uri {}

class _FakeSupabaseRealtimeClient_8 extends _i1.Fake
    implements _i9.SupabaseRealtimeClient {}

class _FakeSupabaseStreamBuilder_9 extends _i1.Fake
    implements _i10.SupabaseStreamBuilder {}

class _FakePostgrestBuilder_10<T> extends _i1.Fake
    implements _i7.PostgrestBuilder<T> {}

class _FakePostgrestResponse_11<T> extends _i1.Fake
    implements _i7.PostgrestResponse<T> {}

class _FakePostgrestTransformBuilder_12<T> extends _i1.Fake
    implements _i7.PostgrestTransformBuilder<T> {}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i11.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get supabaseUrl =>
      (super.noSuchMethod(Invocation.getter(#supabaseUrl), returnValue: '')
          as String);
  @override
  String get supabaseKey =>
      (super.noSuchMethod(Invocation.getter(#supabaseKey), returnValue: '')
          as String);
  @override
  String get schema =>
      (super.noSuchMethod(Invocation.getter(#schema), returnValue: '')
          as String);
  @override
  String get restUrl =>
      (super.noSuchMethod(Invocation.getter(#restUrl), returnValue: '')
          as String);
  @override
  String get realtimeUrl =>
      (super.noSuchMethod(Invocation.getter(#realtimeUrl), returnValue: '')
          as String);
  @override
  String get authUrl =>
      (super.noSuchMethod(Invocation.getter(#authUrl), returnValue: '')
          as String);
  @override
  String get storageUrl =>
      (super.noSuchMethod(Invocation.getter(#storageUrl), returnValue: '')
          as String);
  @override
  String get functionsUrl =>
      (super.noSuchMethod(Invocation.getter(#functionsUrl), returnValue: '')
          as String);
  @override
  _i2.GoTrueClient get auth => (super.noSuchMethod(Invocation.getter(#auth),
      returnValue: _FakeGoTrueClient_0()) as _i2.GoTrueClient);
  @override
  set auth(_i2.GoTrueClient? _auth) =>
      super.noSuchMethod(Invocation.setter(#auth, _auth),
          returnValueForMissingStub: null);
  @override
  _i3.RealtimeClient get realtime =>
      (super.noSuchMethod(Invocation.getter(#realtime),
          returnValue: _FakeRealtimeClient_1()) as _i3.RealtimeClient);
  @override
  set realtime(_i3.RealtimeClient? _realtime) =>
      super.noSuchMethod(Invocation.setter(#realtime, _realtime),
          returnValueForMissingStub: null);
  @override
  set changedAccessToken(String? _changedAccessToken) => super.noSuchMethod(
      Invocation.setter(#changedAccessToken, _changedAccessToken),
      returnValueForMissingStub: null);
  @override
  _i4.FunctionsClient get functions =>
      (super.noSuchMethod(Invocation.getter(#functions),
          returnValue: _FakeFunctionsClient_2()) as _i4.FunctionsClient);
  @override
  _i5.SupabaseStorageClient get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
              returnValue: _FakeSupabaseStorageClient_3())
          as _i5.SupabaseStorageClient);
  @override
  _i6.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
      Invocation.method(#from, [table]),
      returnValue: _FakeSupabaseQueryBuilder_4()) as _i6.SupabaseQueryBuilder);
  @override
  _i7.PostgrestFilterBuilder rpc(String? fn, {Map<String, dynamic>? params}) =>
      (super.noSuchMethod(Invocation.method(#rpc, [fn], {#params: params}),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i12.Future<List<_i3.RealtimeSubscription>> removeAllSubscriptions() =>
      (super.noSuchMethod(Invocation.method(#removeAllSubscriptions, []),
              returnValue: Future<List<_i3.RealtimeSubscription>>.value(
                  <_i3.RealtimeSubscription>[]))
          as _i12.Future<List<_i3.RealtimeSubscription>>);
  @override
  _i12.Future<_i8.RemoveSubscriptionResult> removeSubscription(
          _i3.RealtimeSubscription? subscription) =>
      (super.noSuchMethod(
              Invocation.method(#removeSubscription, [subscription]),
              returnValue: Future<_i8.RemoveSubscriptionResult>.value(
                  _FakeRemoveSubscriptionResult_6()))
          as _i12.Future<_i8.RemoveSubscriptionResult>);
  @override
  List<_i3.RealtimeSubscription> getSubscriptions() =>
      (super.noSuchMethod(Invocation.method(#getSubscriptions, []),
              returnValue: <_i3.RealtimeSubscription>[])
          as List<_i3.RealtimeSubscription>);
}

/// A class which mocks [SupabaseQueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseQueryBuilder extends _i1.Mock
    implements _i6.SupabaseQueryBuilder {
  MockSupabaseQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set body(dynamic _body) => super.noSuchMethod(Invocation.setter(#body, _body),
      returnValueForMissingStub: null);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get maybeEmpty =>
      (super.noSuchMethod(Invocation.getter(#maybeEmpty), returnValue: false)
          as bool);
  @override
  set maybeEmpty(bool? _maybeEmpty) =>
      super.noSuchMethod(Invocation.setter(#maybeEmpty, _maybeEmpty),
          returnValueForMissingStub: null);
  @override
  set method(String? _method) =>
      super.noSuchMethod(Invocation.setter(#method, _method),
          returnValueForMissingStub: null);
  @override
  Uri get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: _FakeUri_7())
          as Uri);
  @override
  set url(Uri? _url) => super.noSuchMethod(Invocation.setter(#url, _url),
      returnValueForMissingStub: null);
  @override
  _i9.SupabaseRealtimeClient on(_i11.SupabaseEventTypes? event,
          void Function(_i11.SupabaseRealtimePayload)? callback) =>
      (super.noSuchMethod(Invocation.method(#on, [event, callback]),
              returnValue: _FakeSupabaseRealtimeClient_8())
          as _i9.SupabaseRealtimeClient);
  @override
  _i10.SupabaseStreamBuilder stream(List<String>? uniqueColumns) =>
      (super.noSuchMethod(Invocation.method(#stream, [uniqueColumns]),
              returnValue: _FakeSupabaseStreamBuilder_9())
          as _i10.SupabaseStreamBuilder);
  @override
  _i7.PostgrestFilterBuilder select([String? columns = r'*']) =>
      (super.noSuchMethod(Invocation.method(#select, [columns]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestBuilder<dynamic> insert(dynamic values,
          {_i7.ReturningOption? returning = _i7.ReturningOption.representation,
          bool? upsert = false,
          String? onConflict}) =>
      (super.noSuchMethod(
              Invocation.method(#insert, [
                values
              ], {
                #returning: returning,
                #upsert: upsert,
                #onConflict: onConflict
              }),
              returnValue: _FakePostgrestBuilder_10<dynamic>())
          as _i7.PostgrestBuilder<dynamic>);
  @override
  _i7.PostgrestBuilder<dynamic> upsert(dynamic values,
          {_i7.ReturningOption? returning = _i7.ReturningOption.representation,
          String? onConflict,
          bool? ignoreDuplicates = false}) =>
      (super.noSuchMethod(
              Invocation.method(#upsert, [
                values
              ], {
                #returning: returning,
                #onConflict: onConflict,
                #ignoreDuplicates: ignoreDuplicates
              }),
              returnValue: _FakePostgrestBuilder_10<dynamic>())
          as _i7.PostgrestBuilder<dynamic>);
  @override
  _i7.PostgrestFilterBuilder update(Map<dynamic, dynamic>? values,
          {_i7.ReturningOption? returning =
              _i7.ReturningOption.representation}) =>
      (super.noSuchMethod(
              Invocation.method(#update, [values], {#returning: returning}),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder delete(
          {_i7.ReturningOption? returning =
              _i7.ReturningOption.representation}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [], {#returning: returning}),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestBuilder<S> withConverter<S>(
          _i7.PostgrestConverter<S>? converter) =>
      (super.noSuchMethod(Invocation.method(#withConverter, [converter]),
              returnValue: _FakePostgrestBuilder_10<S>())
          as _i7.PostgrestBuilder<S>);
  @override
  _i12.Future<_i7.PostgrestResponse<dynamic>> execute(
          {bool? head = false, _i7.CountOption? count}) =>
      (super.noSuchMethod(
              Invocation.method(#execute, [], {#head: head, #count: count}),
              returnValue: Future<_i7.PostgrestResponse<dynamic>>.value(
                  _FakePostgrestResponse_11<dynamic>()))
          as _i12.Future<_i7.PostgrestResponse<dynamic>>);
  @override
  void appendSearchParams(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#appendSearchParams, [key, value]),
          returnValueForMissingStub: null);
  @override
  void overrideSearchParams(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#overrideSearchParams, [key, value]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PostgrestBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestBuilder<T> extends _i1.Mock
    implements _i7.PostgrestBuilder<T> {
  MockPostgrestBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set body(dynamic _body) => super.noSuchMethod(Invocation.setter(#body, _body),
      returnValueForMissingStub: null);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get maybeEmpty =>
      (super.noSuchMethod(Invocation.getter(#maybeEmpty), returnValue: false)
          as bool);
  @override
  set maybeEmpty(bool? _maybeEmpty) =>
      super.noSuchMethod(Invocation.setter(#maybeEmpty, _maybeEmpty),
          returnValueForMissingStub: null);
  @override
  set method(String? _method) =>
      super.noSuchMethod(Invocation.setter(#method, _method),
          returnValueForMissingStub: null);
  @override
  Uri get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: _FakeUri_7())
          as Uri);
  @override
  set url(Uri? _url) => super.noSuchMethod(Invocation.setter(#url, _url),
      returnValueForMissingStub: null);
  @override
  _i7.PostgrestBuilder<S> withConverter<S>(
          _i7.PostgrestConverter<S>? converter) =>
      (super.noSuchMethod(Invocation.method(#withConverter, [converter]),
              returnValue: _FakePostgrestBuilder_10<S>())
          as _i7.PostgrestBuilder<S>);
  @override
  _i12.Future<_i7.PostgrestResponse<T>> execute(
          {bool? head = false, _i7.CountOption? count}) =>
      (super.noSuchMethod(
              Invocation.method(#execute, [], {#head: head, #count: count}),
              returnValue: Future<_i7.PostgrestResponse<T>>.value(
                  _FakePostgrestResponse_11<T>()))
          as _i12.Future<_i7.PostgrestResponse<T>>);
  @override
  void appendSearchParams(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#appendSearchParams, [key, value]),
          returnValueForMissingStub: null);
  @override
  void overrideSearchParams(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#overrideSearchParams, [key, value]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PostgrestFilterBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestFilterBuilder extends _i1.Mock
    implements _i7.PostgrestFilterBuilder {
  MockPostgrestFilterBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.PostgrestFilterBuilder Function(String, dynamic) get cs =>
      (super.noSuchMethod(Invocation.getter(#cs),
          returnValue: (String __p0, dynamic __p1) =>
              _FakePostgrestFilterBuilder_5()) as _i7.PostgrestFilterBuilder
          Function(String, dynamic));
  @override
  _i7.PostgrestFilterBuilder Function(String, dynamic) get cd =>
      (super.noSuchMethod(Invocation.getter(#cd),
          returnValue: (String __p0, dynamic __p1) =>
              _FakePostgrestFilterBuilder_5()) as _i7.PostgrestFilterBuilder
          Function(String, dynamic));
  @override
  _i7.PostgrestFilterBuilder Function(String, String) get sl =>
      (super.noSuchMethod(Invocation.getter(#sl),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_5()) as _i7.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i7.PostgrestFilterBuilder Function(String, String) get sr =>
      (super.noSuchMethod(Invocation.getter(#sr),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_5()) as _i7.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i7.PostgrestFilterBuilder Function(String, String) get nxl =>
      (super.noSuchMethod(Invocation.getter(#nxl),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_5()) as _i7.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i7.PostgrestFilterBuilder Function(String, String) get nxr =>
      (super.noSuchMethod(Invocation.getter(#nxr),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_5()) as _i7.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i7.PostgrestFilterBuilder Function(String, String) get adj =>
      (super.noSuchMethod(Invocation.getter(#adj),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_5()) as _i7.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i7.PostgrestFilterBuilder Function(String, String) get ov =>
      (super.noSuchMethod(Invocation.getter(#ov),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_5()) as _i7.PostgrestFilterBuilder
          Function(String, String));
  @override
  set body(dynamic _body) => super.noSuchMethod(Invocation.setter(#body, _body),
      returnValueForMissingStub: null);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get maybeEmpty =>
      (super.noSuchMethod(Invocation.getter(#maybeEmpty), returnValue: false)
          as bool);
  @override
  set maybeEmpty(bool? _maybeEmpty) =>
      super.noSuchMethod(Invocation.setter(#maybeEmpty, _maybeEmpty),
          returnValueForMissingStub: null);
  @override
  set method(String? _method) =>
      super.noSuchMethod(Invocation.setter(#method, _method),
          returnValueForMissingStub: null);
  @override
  Uri get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: _FakeUri_7())
          as Uri);
  @override
  set url(Uri? _url) => super.noSuchMethod(Invocation.setter(#url, _url),
      returnValueForMissingStub: null);
  @override
  _i7.PostgrestFilterBuilder not(
          String? column, String? operator, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#not, [column, operator, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder or(String? filters, {String? foreignTable}) =>
      (super.noSuchMethod(
              Invocation.method(#or, [filters], {#foreignTable: foreignTable}),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder eq(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#eq, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder neq(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#neq, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder gt(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#gt, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder gte(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#gte, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder lt(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#lt, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder lte(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#lte, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder like(String? column, String? pattern) =>
      (super.noSuchMethod(Invocation.method(#like, [column, pattern]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder ilike(String? column, String? pattern) =>
      (super.noSuchMethod(Invocation.method(#ilike, [column, pattern]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder is_(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#is_, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder in_(String? column, List<dynamic>? values) =>
      (super.noSuchMethod(Invocation.method(#in_, [column, values]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder contains(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#contains, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder containedBy(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#containedBy, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder rangeLt(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeLt, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder rangeGt(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeGt, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder rangeGte(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeGte, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder rangeLte(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeLte, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder rangeAdjacent(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeAdjacent, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder overlaps(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#overlaps, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder textSearch(String? column, String? query,
          {String? config, _i7.TextSearchType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #textSearch, [column, query], {#config: config, #type: type}),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder fts(String? column, String? query,
          {String? config}) =>
      (super.noSuchMethod(
              Invocation.method(#fts, [column, query], {#config: config}),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder plfts(String? column, String? query,
          {String? config}) =>
      (super.noSuchMethod(
              Invocation.method(#plfts, [column, query], {#config: config}),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder phfts(String? column, String? query,
          {String? config}) =>
      (super.noSuchMethod(
              Invocation.method(#phfts, [column, query], {#config: config}),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder wfts(String? column, String? query,
          {String? config}) =>
      (super.noSuchMethod(
              Invocation.method(#wfts, [column, query], {#config: config}),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder filter(
          String? column, String? operator, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#filter, [column, operator, value]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestFilterBuilder match(Map<dynamic, dynamic>? query) =>
      (super.noSuchMethod(Invocation.method(#match, [query]),
              returnValue: _FakePostgrestFilterBuilder_5())
          as _i7.PostgrestFilterBuilder);
  @override
  _i7.PostgrestTransformBuilder<dynamic> select([String? columns = r'*']) =>
      (super.noSuchMethod(Invocation.method(#select, [columns]),
              returnValue: _FakePostgrestTransformBuilder_12<dynamic>())
          as _i7.PostgrestTransformBuilder<dynamic>);
  @override
  _i7.PostgrestTransformBuilder<dynamic> order(String? column,
          {bool? ascending = false,
          bool? nullsFirst = false,
          String? foreignTable}) =>
      (super.noSuchMethod(
              Invocation.method(#order, [
                column
              ], {
                #ascending: ascending,
                #nullsFirst: nullsFirst,
                #foreignTable: foreignTable
              }),
              returnValue: _FakePostgrestTransformBuilder_12<dynamic>())
          as _i7.PostgrestTransformBuilder<dynamic>);
  @override
  _i7.PostgrestTransformBuilder<dynamic> limit(int? count,
          {String? foreignTable}) =>
      (super.noSuchMethod(
              Invocation.method(#limit, [count], {#foreignTable: foreignTable}),
              returnValue: _FakePostgrestTransformBuilder_12<dynamic>())
          as _i7.PostgrestTransformBuilder<dynamic>);
  @override
  _i7.PostgrestTransformBuilder<dynamic> range(int? from, int? to,
          {String? foreignTable}) =>
      (super.noSuchMethod(
          Invocation.method(#range, [from, to], {#foreignTable: foreignTable}),
          returnValue:
              _FakePostgrestTransformBuilder_12<dynamic>()) as _i7
          .PostgrestTransformBuilder<dynamic>);
  @override
  _i7.PostgrestTransformBuilder<dynamic> single() =>
      (super.noSuchMethod(Invocation.method(#single, []),
              returnValue: _FakePostgrestTransformBuilder_12<dynamic>())
          as _i7.PostgrestTransformBuilder<dynamic>);
  @override
  _i7.PostgrestTransformBuilder<dynamic> maybeSingle() =>
      (super.noSuchMethod(Invocation.method(#maybeSingle, []),
              returnValue: _FakePostgrestTransformBuilder_12<dynamic>())
          as _i7.PostgrestTransformBuilder<dynamic>);
  @override
  _i7.PostgrestTransformBuilder<dynamic> csv() =>
      (super.noSuchMethod(Invocation.method(#csv, []),
              returnValue: _FakePostgrestTransformBuilder_12<dynamic>())
          as _i7.PostgrestTransformBuilder<dynamic>);
  @override
  _i7.PostgrestBuilder<S> withConverter<S>(
          _i7.PostgrestConverter<S>? converter) =>
      (super.noSuchMethod(Invocation.method(#withConverter, [converter]),
              returnValue: _FakePostgrestBuilder_10<S>())
          as _i7.PostgrestBuilder<S>);
  @override
  _i12.Future<_i7.PostgrestResponse<dynamic>> execute(
          {bool? head = false, _i7.CountOption? count}) =>
      (super.noSuchMethod(
              Invocation.method(#execute, [], {#head: head, #count: count}),
              returnValue: Future<_i7.PostgrestResponse<dynamic>>.value(
                  _FakePostgrestResponse_11<dynamic>()))
          as _i12.Future<_i7.PostgrestResponse<dynamic>>);
  @override
  void appendSearchParams(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#appendSearchParams, [key, value]),
          returnValueForMissingStub: null);
  @override
  void overrideSearchParams(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#overrideSearchParams, [key, value]),
          returnValueForMissingStub: null);
}
